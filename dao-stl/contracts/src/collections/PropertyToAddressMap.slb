/// @title PropertyToAddressMap
/// @author Andreas Olofsson (androlo1980@gmail.com)
/// CONTRACT:
/// PropertyToAddressMap is an iterable map with (bytes32, address) entries.
/// Overwrites previous entries by default.
/// O(1) insert, find, and remove.
/// Stores an array index (uint) for each entry, in addition to the key and value.
/// This is for easy lookup, and for making iteration possible.
/// Order of insertion is not preserved.
library PropertyToAddressMap {

    struct Element {
        uint _keyIndex;
        address value;
    }

    struct Map
    {
        mapping(bytes32 => Element) _data;
        bytes32[] _keys;
    }

    /// @notice PropertyToAddressMap.insert(map, key, value) to add an entry to the map. Overwrites existing values.
    /// @dev Add an entry to the map.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param key (address) the key.
    /// @param value (bytes32) the value.
    /// @return oldValue (address) the old value (if any).
    function insert(Map storage map, bytes32 key, address value) returns (address oldValue) {
        (oldValue,) = insert(map, key, value, true);
    }

    /// @notice PropertyToAddressMap.insert(map, key, value, overwrite) to add an entry to the map.
    /// @dev Add an entry to the map.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param key (address) the key.
    /// @param value (bytes32) the value.
    /// @param overwrite (bool) whether or not to overwrite existing values.
    /// @return oldValue (address) the old value (if any).
    /// @return added (bool) whether or not the entry was added.
    function insert(Map storage map, bytes32 key, address value, bool overwrite) returns (address oldValue, bool added) {
        var exists = map._data[key].value != 0;

        if (!exists)
            map._data[key] = Element(map._keys.push(key) - 1, value);
        else if (overwrite) {
            oldValue = map._data[key].value;
            map._data[key].value = value;
            added = true;
        }
    }

    /// @notice PropertyToAddressMap.remove(map, key) to remove an entry from the map.
    /// @dev Remove an entry from the map.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param key (bytes32) the key.
    /// @return value (address) The value stored at the given key (if any).
    /// @return removed (bool) whether or not the key was removed (false means that the key wasn't found).
    function remove(Map storage map, bytes32 key) returns (address value, bool removed) {
        var elem = map._data[key];
        value = elem.value;
        var exists = value != 0;
        if (!exists) return;

        var keyIndex = elem._keyIndex;

        delete map._data[key];
        var len = map._keys.length;
        if (keyIndex != len - 1) {
            var swap = map._keys[len - 1];
            map._keys[keyIndex] = swap;
            map._data[swap]._keyIndex = keyIndex;
        }
        map._keys.length--;
        removed = true;
    }

    /// @notice PropertyToAddressMap.get(map, key) get a value by key.
    /// @dev Get a value by key.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param key (bytes32) the key.
    /// @return value (address) the value.
    function get(Map storage map, bytes32 key) constant returns (address value) {
        return map._data[key].value;
    }

    /// @notice PropertyToAddressMap.hasKey(map, key) to check if a key exists.
    /// @dev Check if a key exists.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param key (bytes32) the key.
    /// @return has (bool) whether or not the key exists.
    function hasKey(Map storage map, bytes32 key) constant returns (bool has) {
        return map._data[key].value != 0;
    }

    /// @notice PropertyToAddressMap.keyFromIndex(map, index) to get a key by its index in the backing array.
    /// @dev Get a key by its index in the backing array.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param index (uint) the index.
    /// @return key (bytes32) the key.
    /// @return exists (bool) true if the key exists (used to avoid nil value ambiguity).
    function keyFromIndex(Map storage map, uint index) constant returns (bytes32 key, bool exists) {
        if (index >= map._keys.length)
            return;
        else
            return (map._keys[index], true);
    }

    /// @notice PropertyToAddressMap.keyFromIndex(map, index) to get a key by its index in the backing array.
    /// @dev Get a key by its index in the backing array.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @param index (uint) the index.
    /// @return key (bytes32) the key.
    /// @return exists (bool) true if the key exists (used to avoid nil value ambiguity).
    function entryFromIndex(Map storage map, uint index) constant returns (bytes32 key, address value, bool exists) {
        if (index >= map._keys.length)
            return;
        else
            return (map._keys[index], map._data[key].value, true);
    }

    /// @notice PropertyToAddressMap.size(map) to get the number of entries in the map.
    /// @dev Get the number of entries in the map.
    /// @param map (PropertyToAddressMap.Map) storage reference to the map.
    /// @return size (uint) the number of entries.
    function size(Map storage map) constant returns (uint size) {
        return map._keys.length;
    }

}