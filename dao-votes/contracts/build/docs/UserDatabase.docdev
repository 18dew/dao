{
   "author" : "Andreas Olofsson (androlo1980@gmail.com)",
   "methods" : {
      "destroy(address)" : {
         "details" : "Destroy a contract. No return values since it's a destruction.",
         "params" : {
            "fundReceiver" : "(address) the account that receives the funds."
         }
      },
      "dougAddress()" : {
         "details" : "Get the address of the Doug contract.",
         "return" : "dougAddress (address) the doug address."
      },
      "hasUser(address)" : {
         "details" : "Check if a user exists.",
         "params" : {
            "addr" : "(address) the address."
         },
         "return" : "has (bool) whether or not the user exists."
      },
      "hasUsers(address,address)" : {
         "details" : "Check if two users exists.",
         "params" : {
            "addr1" : "(address) the address of the first user.",
            "addr2" : "(address) the address of the second user."
         },
         "return" : "has1 (bool) whether or not the first user exists.has2 (bool) whether or not the second user exists."
      },
      "registerUser(address,bytes32,uint256,bytes32)" : {
         "details" : "Register a new user.",
         "params" : {
            "addr" : "(address) the address.",
            "value_dataHash" : "(bytes32) hash of the file containing (optional) user data.",
            "value_nickname" : "(bytes32) the user name.",
            "value_timestamp" : "(uint) the unix timestamp."
         },
         "return" : "error (uint16) error code."
      },
      "removeUser(address)" : {
         "details" : "Remove a user.",
         "params" : {
            "addr" : "(address) the user address."
         },
         "return" : "error (uint16) error code."
      },
      "setDougAddress(address)" : {
         "details" : "Set the address of the Doug contract.",
         "params" : {
            "dougAddr" : "(address) the address"
         },
         "return" : "added (bool) true means the address was added successfully (doug implementations should normally not register a contract that returns false."
      },
      "size()" : {
         "details" : "Get the number of users.",
         "return" : "size (uint) the number of users."
      },
      "updateDataHash(address,bytes32)" : {
         "details" : "Register a new data hash for a user.",
         "params" : {
            "addr" : "(address) the address.",
            "dataHash" : "(bytes32) hash of the file containing user data."
         },
         "return" : "error (uint16) error code."
      },
      "user(address)" : {
         "details" : "Get user data.",
         "params" : {
            "addr" : "(address) the address."
         },
         "return" : "value_nickname (bytes32) the nickname.value_timestamp (uint) the time when the user was added.value_dataHash (bytes32) the data-hash (optional)."
      },
      "userAddressFromIndex(uint256)" : {
         "details" : "Get a user address by its index in the backing array.",
         "params" : {
            "index" : "(uint) the index."
         },
         "return" : "key (address) the key.error (uint16) error code."
      }
   },
   "title" : "UserDatabase"
}
